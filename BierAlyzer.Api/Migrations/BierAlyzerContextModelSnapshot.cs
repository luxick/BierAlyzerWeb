// <auto-generated />

using System;
using BierAlyzer.Api.Models;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using BierAlyzer.EntityModel;

namespace BierAlyzer.Api.Migrations
{
    [DbContext(typeof(BierAlyzerContext))]
    partial class BierAlyzerContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("MySql:ValueGenerationStrategy", MySqlValueGenerationStrategy.IdentityColumn)
                .HasAnnotation("ProductVersion", "2.0.2-rtm-10011");

            modelBuilder.Entity("BierAlyzer.EntityModel.Drink", b =>
                {
                    b.Property<Guid>("DrinkId")
                        .ValueGeneratedOnAdd();

                    b.Property<double>("Amount");

                    b.Property<string>("CreatedString");

                    b.Property<string>("ModifiedString");

                    b.Property<string>("Name");

                    b.Property<Guid?>("OwnerId");

                    b.Property<double>("Percentage");

                    b.Property<bool>("Visible");

                    b.HasKey("DrinkId");

                    b.HasIndex("OwnerId");

                    b.ToTable("Drink");
                });

            modelBuilder.Entity("BierAlyzer.EntityModel.DrinkEntry", b =>
                {
                    b.Property<Guid>("EntryId")
                        .ValueGeneratedOnAdd();

                    b.Property<Guid>("DrinkId");

                    b.Property<Guid>("EventId");

                    b.Property<Guid>("UserId");

                    b.HasKey("EntryId");

                    b.HasIndex("DrinkId");

                    b.HasIndex("EventId");

                    b.HasIndex("UserId");

                    b.ToTable("DrinkEntry");
                });

            modelBuilder.Entity("BierAlyzer.EntityModel.Event", b =>
                {
                    b.Property<Guid>("EventId")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Code");

                    b.Property<string>("CreatedString");

                    b.Property<string>("Description");

                    b.Property<string>("EndString");

                    b.Property<string>("ModifiedString");

                    b.Property<string>("Name");

                    b.Property<Guid>("OwnerId");

                    b.Property<string>("StartString");

                    b.Property<int>("Type");

                    b.HasKey("EventId");

                    b.HasIndex("OwnerId");

                    b.ToTable("Event");
                });

            modelBuilder.Entity("BierAlyzer.EntityModel.RefreshToken", b =>
                {
                    b.Property<Guid>("TokenId")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("Expires");

                    b.Property<string>("Token");

                    b.Property<Guid>("UserId");

                    b.HasKey("TokenId");

                    b.ToTable("RefreshToken");
                });

            modelBuilder.Entity("BierAlyzer.EntityModel.User", b =>
                {
                    b.Property<Guid>("UserId")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("CreatedString");

                    b.Property<bool>("Enabled");

                    b.Property<string>("Hash");

                    b.Property<string>("LastLoginString");

                    b.Property<string>("Mail");

                    b.Property<string>("ModifiedString");

                    b.Property<string>("Origin");

                    b.Property<string>("Salt");

                    b.Property<int>("Type");

                    b.Property<string>("Username");

                    b.HasKey("UserId");

                    b.ToTable("User");
                });

            modelBuilder.Entity("BierAlyzer.EntityModel.UserEvent", b =>
                {
                    b.Property<Guid>("UserId");

                    b.Property<Guid>("EventId");

                    b.HasKey("UserId", "EventId");

                    b.HasAlternateKey("EventId", "UserId");

                    b.ToTable("UserEvent");
                });

            modelBuilder.Entity("BierAlyzer.EntityModel.Drink", b =>
                {
                    b.HasOne("BierAlyzer.EntityModel.User", "Owner")
                        .WithMany("OwnedDrinks")
                        .HasForeignKey("OwnerId");
                });

            modelBuilder.Entity("BierAlyzer.EntityModel.DrinkEntry", b =>
                {
                    b.HasOne("BierAlyzer.EntityModel.Drink", "Drink")
                        .WithMany("DrinkEntries")
                        .HasForeignKey("DrinkId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("BierAlyzer.EntityModel.Event", "Event")
                        .WithMany("DrinkEntries")
                        .HasForeignKey("EventId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("BierAlyzer.EntityModel.User", "User")
                        .WithMany("DrinkEntries")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("BierAlyzer.EntityModel.Event", b =>
                {
                    b.HasOne("BierAlyzer.EntityModel.User", "Owner")
                        .WithMany("OwnedEvents")
                        .HasForeignKey("OwnerId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("BierAlyzer.EntityModel.UserEvent", b =>
                {
                    b.HasOne("BierAlyzer.EntityModel.Event", "Event")
                        .WithMany("EventUsers")
                        .HasForeignKey("EventId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("BierAlyzer.EntityModel.User", "User")
                        .WithMany("UserEvents")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
